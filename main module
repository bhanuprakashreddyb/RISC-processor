module risc_32(clk1, clk2);
    input clk1, clk2;
    reg[31:0] if_id_ir, pc , if_id_npc;
    reg[31:0] id_ex_ir, id_ex_a, id_ex_b, id_ex_imm , id_ex_npc;
    reg[31:0] ex_mem_aluout, ex_mem_ir;
    reg[1:0] id_ex_type, ex_mem_type, mem_rb_type ,ex_mem_cond;
    reg[31:0] mem_rb_ir, mem_rb_aluout;
    reg[31:0] regb[0:31];
    reg[31:0] mem[0:31], datamem[0:31];
    reg[5:0] id_ex_opcd, ex_mem_opcd;
    reg halted;
    reg taken_branch;
   
    parameter add = 6'b000000, sub = 6'b000001, mul = 6'b000010, div = 6'b000011, lsft = 6'b000110, and_32=6'b000100, or_32 = 6'b000101, addi = 6'b100001, subi = 6'b100010, muli = 6'b100011, divi = 6'b100100, beqz = 6'b010001, bneqz=6'b010010,halt = 6'b111111;
    parameter lw = 6'b110000, sw = 6'b110001;
    parameter rr_type = 2'b00, rm_type = 2'b01, ls_type = 2'b10 , b_type =2'b11;
    
    //INSTRUCTION FETCH
    always @(posedge clk1)
        if(halted == 0)
            if(((ex_mem_ir[31:26]==beqz)&&(ex_mem_cond==1)) || ((ex_mem_ir[31:26]==bneqz)&&(ex_mem_cond==0)))
                begin
                    if_id_ir <= mem[ex_mem_aluout];
                    taken_branch <= 1'b1;
                    if_id_npc <= ex_mem_aluout+1;
                    pc <= pc+1;
                end
            else
                begin
                    if_id_ir = mem[pc];
                    if_id_npc <= pc+1;
                    pc = pc + 1;
                end
    
    //INSTRUCTION DECODE
    always @(posedge clk2)
        begin
        if(halted == 0)
            begin
            if(if_id_ir[31:26] == 6'b111111)
            halted <= 1;
            if(if_id_ir[31:30] == 2'b00)
            id_ex_type <= rr_type;
            if(if_id_ir[31:30] == 2'b10)
            id_ex_type <= rm_type;
            if(if_id_ir[31:30] == 2'b11)
            id_ex_type <= ls_type;
            if(if_id_ir[31:30] == 2'b01)
            id_ex_type <= b_type;
            end
        id_ex_ir <= if_id_ir;
        id_ex_npc<= if_id_npc;
        id_ex_a <= regb[if_id_ir[20:16]];
        id_ex_b <= regb[if_id_ir[15:11]];
        id_ex_imm <= if_id_ir[15:0];
        id_ex_opcd <= if_id_ir[31:26];
        end
    //INSTRUCTION EXECUTE
    always @(posedge clk1)
        begin
        taken_branch = 1'b0;
        if(halted == 0)
            begin
            case(id_ex_type)
            rr_type : begin
                      case(id_ex_opcd)
                          add : ex_mem_aluout <= id_ex_a + id_ex_b;
                          sub : ex_mem_aluout <= id_ex_a - id_ex_b;
                          mul : ex_mem_aluout <= id_ex_a * id_ex_b;
                          div : ex_mem_aluout <= id_ex_a / id_ex_b;
                          lsft : ex_mem_aluout <= id_ex_a << id_ex_b;
                          and_32:ex_mem_aluout <= id_ex_a & id_ex_b;
                          or_32 : ex_mem_aluout<= id_ex_a | id_ex_b;
                          default : ex_mem_aluout <= 8'h00000000;
                      endcase
                      end
           
            rm_type : begin
                      case(id_ex_opcd)
                          addi : ex_mem_aluout <= id_ex_a + id_ex_imm;
                          subi : ex_mem_aluout <= id_ex_a - id_ex_imm;
                          muli : ex_mem_aluout <= id_ex_a * id_ex_imm;
                          divi : ex_mem_aluout <= id_ex_a / id_ex_imm;
                          default : ex_mem_aluout <= 8'h00000000;
                      endcase
                      end
           
            ls_type : begin
                      case(id_ex_opcd)
                          sw : ex_mem_aluout <= id_ex_a + id_ex_imm;
                          lw : ex_mem_aluout <= id_ex_a + id_ex_imm;
                      endcase
                      end
            b_type : begin
                     ex_mem_aluout <= id_ex_npc + id_ex_imm;
                     ex_mem_cond <= (id_ex_a==0);
                     end
            default : ex_mem_aluout <= 8'h00000000;
            endcase
            end
        ex_mem_ir <= id_ex_ir;
        ex_mem_type <= id_ex_type;
        ex_mem_opcd <= id_ex_opcd;
        end
     //MEMORY STORAGE
    always @(posedge clk2)
        begin
        if(halted == 0)
            begin
            mem_rb_ir <= ex_mem_ir;
            mem_rb_type <= ex_mem_type;
            if(ex_mem_opcd == lw) mem_rb_aluout <= datamem[ex_mem_aluout];
            else if(ex_mem_opcd == sw) datamem[ex_mem_aluout] <= regb[ex_mem_ir[25:21]];
            else mem_rb_aluout <= ex_mem_aluout;
            end
        end
       
    //WRITE BACK
    always @(posedge clk1)
        if(id_ex_type != 3'b111)
            if(taken_branch==0)
            begin
                if(halted == 0)
                    if(mem_rb_ir[31:26] != 6'b110001)
                        regb[mem_rb_ir[25:21]] <= ex_mem_aluout;
            end
endmodule
